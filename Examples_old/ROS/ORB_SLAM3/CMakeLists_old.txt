cmake_minimum_required(VERSION 2.4.6)
project(ORB_SLAM3)
message(STATUS ${PROJECT_SOURCE_DIR})
# include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# rosbuild_init()

# IF(NOT ROS_BUILD_TYPE)
#   SET(ROS_BUILD_TYPE Release)
# ENDIF()

# MESSAGE("Build type: " ${ROS_BUILD_TYPE})

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -Wall  -O3 -march=native ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall  -O3 -march=native")

# Check C++14 or C++0x support
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++14" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
   add_definitions(-DCOMPILEDWITHC11)
   message(STATUS "Using flag -std=c++14.")
elseif(COMPILER_SUPPORTS_CXX0X)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
   add_definitions(-DCOMPILEDWITHC0X)
   message(STATUS "Using flag -std=c++0x.")
else()
   message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++14 support. Please use a different C++ compiler.")
endif()

LIST(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/../../../../cmake_modules)

find_package(catkin REQUIRED COMPONENTS
    roscpp
    tf
    sensor_msgs
    image_transport
    cv_bridge
    std_msgs
    nav_msgs
    geometry_msgs
    tf2
    rospy
)

# find_package(OpenCV 3.0 QUIET)
# if(NOT OpenCV_FOUND)
#    find_package(OpenCV 2.4.3 QUIET)
#    if(NOT OpenCV_FOUND)
#       message(FATAL_ERROR "OpenCV > 2.4.3 not found.")
#    endif()
# endif()
# find_package(Eigen3 3.1.0 REQUIRED)
# find_package(Pangolin REQUIRED)

find_package(OpenCV 4.4.0 REQUIRED)
MESSAGE("OPENCV VERSION:")
MESSAGE(${OpenCV_VERSION})
find_package(Eigen3 REQUIRED)
MESSAGE("Eigen3 VERSION:")
MESSAGE(${Eigen3_VERSION})
find_package(Pangolin REQUIRED)

catkin_package(
# INCLUDE_DIRS include
 LIBRARIES ORB_SLAM3
#  CATKIN_DEPENDS roscpp std_msgs
#  DEPENDS system_lib
)

include_directories(
include
${catkin_INCLUDE_DIRS}
)

include_directories(
${PROJECT_SOURCE_DIR}
${PROJECT_SOURCE_DIR}/../../../../../
# ${PROJECT_SOURCE_DIR}/../../../../include
# ${PROJECT_SOURCE_DIR}/../../../../include/CameraModels
/home/amsl/Dev/ORB_SLAM3
/home/amsl/Dev/ORB_SLAM3/include
/home/amsl/Dev/ORB_SLAM3/include/CameraModels
${Pangolin_INCLUDE_DIRS}
)

set(LIBS
${catkin_LIBRARIES}
${OpenCV_LIBS}
${EIGEN3_LIBS}
${Pangolin_LIBRARIES}
# ${PROJECT_SOURCE_DIR}/../../../../Thirdparty/DBoW2/lib/libDBoW2.so
# ${PROJECT_SOURCE_DIR}/../../../../Thirdparty/g2o/lib/libg2o.so
# ${PROJECT_SOURCE_DIR}/../../../../lib/libORB_SLAM3.so
/home/amsl/Dev/ORB_SLAM3/Thirdparty/DBoW2/lib/libDBoW2.so
/home/amsl/Dev/ORB_SLAM3/Thirdparty/g2o/lib/libg2o.so
/home/amsl/Dev/ORB_SLAM3/lib/libORB_SLAM3.so
-lboost_system
)

# Node for monocular camera
# rosbuild_add_executable(Mono src/ros_mono.cc)
add_executable(Mono src/ros_mono.cc)
target_link_libraries(Mono ${LIBS})

# Node for monocular camera (Augmented Reality Demo)
# rosbuild_add_executable(MonoAR src/AR/ros_mono_ar.cc src/AR/ViewerAR.h src/AR/ViewerAR.cc)
# add_executable(MonoAR src/AR/ros_mono_ar.cc src/AR/ViewerAR.h src/AR/ViewerAR.cc)
# target_link_libraries(MonoAR ${LIBS})

# Node for stereo camera
# rosbuild_add_executable(Stereo src/ros_stereo.cc)
add_executable(Stereo src/ros_stereo.cc)
target_link_libraries(Stereo ${LIBS})

# Node for RGB-D camera
# rosbuild_add_executable(RGBD src/ros_rgbd.cc)
add_executable(RGBD src/ros_rgbd.cc)
target_link_libraries(RGBD ${LIBS})

# Node for monocular-inertial camera
# rosbuild_add_executable(Mono_Inertial src/ros_mono_inertial.cc)
add_executable(Mono_Inertial src/ros_mono_inertial.cc)
target_link_libraries(Mono_Inertial ${LIBS})

# Node for stereo-inertial camera
# rosbuild_add_executable(Stereo_Inertial src/ros_stereo_inertial.cc)
add_executable(Stereo_Inertial src/ros_stereo_inertial.cc)
target_link_libraries(Stereo_Inertial ${LIBS})
